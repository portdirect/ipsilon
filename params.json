{
  "name": "Ipsilon",
  "tagline": "Ipsilon Federated Identity Provider",
  "body": "\r\nIpsilon - Identity Provider\r\n===========================\r\n\r\nThe Ipsilon project implements an [Identity Provider](http://en.wikipedia.org/wiki/Identity_provider)\r\nthat is easy to use and configure. And it aims at providing installation scripts\r\nfor applications that can use an Apache fronted to perform user authentication.\r\n\r\nAn IdP server allows users to authenticate against any identity provider\r\nwhether that is a corporate LDAP server or even just local files or custom\r\npluggable modules and allows applications to authenticate users while being\r\ncompletely agnostic of what authentication infrastructure is being used.\r\n\r\nApplications can currently use the [SAML2](http://en.wikipedia.org/wiki/Security_Assertion_Markup_Language)\r\nprotocol to talk to the Ipsilon identity provider, an application that uses\r\nSAML is called a Service Provider.\r\n\r\nIpsilon uses the [LASSO](http://lasso.entrouvert.org) libraries and Python\r\nbindings to implement SAML support.\r\n\r\nIpsilon Server Installation\r\n===========================\r\n\r\nThe Ipsilon server can be easily installed by simply running the\r\n`ipsilon-server-install` command.\r\n\r\nPrerequisites:\r\n- An Apache server with SSL configured\r\n- A keytab if Kerberos authentication is desired\r\n- An unprivileged user to run the Ipsilon code (defaults to 'ipsilon')\r\n\r\nCurrently there are only two available authentication modules, GSSAPI and\r\nPAM. The Kerberos module uses `mod_auth_gssapi` (which it will configure for\r\nyou at install time), the Pam module simply uses the PAM stack with a default service\r\nname set to `ipsilon`.\r\n\r\n**NOTE** The PAM module is invoked as an unprivileged user so if you are using the\r\npam_unix plugin to authenticate users you'll find out that authentication does\r\nnot work properly. Please use a different PAM module, like `pam_sss`, `pam_ldap`,\r\netc..\r\n\r\nBefore you run the install script make sure to create an administrative user\r\nthat can be authenticated either via PAM or GSSAPI. The default name the\r\ninstallation script expects is `admin` but that can be changed with the command\r\nline option named `--admin-user`\r\n\r\nThe hostname used is the system host name, if you can't set the system hostname\r\nto a fully qualified name, used the `--hostname` option to pass the desired fully\r\nqualified name for the IdP. It is important to use the correct name as this\r\nname is referenced and resolved by remote clients.\r\n\r\nOther options are available by running `ipsilon-server-install --help`\r\n\r\nTo install a server that allow both GSSAPI (Kerberos) and PAM authentication\r\nuse:\r\n\r\n    $ ipsilon-server-install --gssapi=yes --pam=yes\r\n\r\nThis command will generate a default instance called `idp` (you can change the\r\ndefault name using the `--instance` switch). Multiple instance can be installed\r\nin parallel, each wit a different name.\r\n\r\nInstances are configured to be available at https://hostname/instance\r\n\r\nSo for a server called ipsilon.example.com, using the default installation\r\noptions the IdP will be available at https://ipsilon.example.com/idp/\r\n\r\nThe install script expects to find the keytab in /etc/httpd/conf/http.keytab\r\n\r\n**NOTE:** If you are installing Ipsilon in a [FreeIPA](http://www.freeipa.org )\r\nenvironment you can use the --ipa switch to simplify the deployment.\r\nUsing the `--ipa` switch will allow the use of your IPA Kerberos administrative\r\ncredentials to automatically provision a keytab for the HTTP service if one is\r\nnot available yet.  You will likely want to use the `--admin-user` option to\r\nspecify the full principal of the user who will administer Ipsilon.\r\nFor example to use the FreeIPA admin user for the EXAMPLE.COM realm, you would use:\r\n\r\n    $ ipsilon-server-install --ipa --admin-user admin@EXAMPLE.COM\r\n\r\nOnce the script has successfully completed the installation, restart the Apache\r\nHTTPD server to activate it.\r\n\r\nUse your `admin` user to connect to the Web UI and perform additional\r\nadministration tasks.\r\n\r\n\r\nIpsilon Clients configuration\r\n=============================\r\n\r\nIpsilon clients can be quickly configured running the provided\r\n`ipsilon-client-install` command.\r\n\r\nPrerequisites:\r\n- An Apache server with SSL configured\r\n- The [mod_mellon](https://code.google.com/p/modmellon/) authentication module for Apache\r\n- A previously installed SAML IdP server (like Ipsilon itself)\r\n\r\nThe default configuration for the client will install a configuration in Apache\r\nthat will authenticate via the IdP any attempt to connect to the location named\r\n'/protected', a test file is returned at that location.\r\n\r\nIn order to successfully install a client 2 steps are necessary:\r\n\r\n1. Prepare the client configuration and SAML metadata file.\r\n\r\nTo generate a valid metadata file and configuration it is necessary to provide\r\nthe IdP metadata file  to the installer, it is also useful to decide upfront\r\nwhere the application to be protected is located.\r\n\r\nLet's assume the IdP is a standard install of the Ipsilon server on the server\r\nname ipsilon.example.com, and the client to be installed is called\r\nmedia.exmple.com with a wiki application located under /wiki\r\n\r\nThe following command will configure the server and generate the metadata file:\r\n\r\n     $ ipsilon-client-install \\\r\n     --saml-idp-metadata http://ipsilon.example.com/idp/saml2/metadata \\\r\n     --saml-auth /wiki\r\n\r\nUse --help to explore all the possible options.\r\n\r\n2. Upload the generated metadata file to the IdP.\r\n\r\nOnce the script has successfully completed installation it will create a\r\nfew files in /etc/httpd/saml2/`hostname`. There you will find a (self-signed)\r\ncertificate and a private key used to authenticate with the IdP and 2 metadata\r\nfiles, one of which is called 'metadata.xml'\r\n\r\nLog in with the 'admin' account to the Ipsilon server and go to:\r\n Administration -> Identity Providers -> saml2 -> Administer\r\nClick the 'Add New' button and add a new entry uploading the metadata.xml file\r\njust generated.\r\n\r\nOnce this is done, test that the authentication is working by going to the\r\napplication server url: https://media.example.com/wiki\r\nThe SP should redirect you to the IdP server, perform authentication, and then\r\nredirect you automatically back to the application server where you should find\r\nyourself authenticated.\r\n\r\nNOTE: read modmellon's documentation to find out how to pass additional\r\nauthorization data to the application. For simple authentication the application\r\nshould expect a user have been authenticate if it finds a non empty 'REMOTE_USER'\r\nenvironment variable in the incoming requests.\r\n\r\nALSO NOTE: If your application is already SAML aware you can simply run the\r\ninstall script with the --saml-no-httpd option. This will generate the\r\ncertificates and the metadata.xml file you need to provide to the application\r\nand the IdP in the current directory.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}