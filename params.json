{
  "name": "Ipsilon",
  "tagline": "Ipsilon Federated Identity Provider",
  "body": "\r\nIpsilon - Identity Provider\r\n===========================\r\n\r\nIpsilon allows web applications to consume users from existing identity\r\nmanagement systems, even those that it doesn't have direct access to.\r\n\r\nTraditionally, web applications have their own user database, or they directly\r\ninteract with a centralized identity management system such as an LDAP server.\r\nBoth of these approaches put a lot of responsibility on the web application\r\nitself.  Let's consider some of the issues around these two approaches.\r\n\r\nLocal user database:\r\n\r\n* User management interfaces need to be developed.\r\n* User accounts are local to the application, leading to users having\r\n  different passwords for different applications.\r\n* Authentication is often password based, which is not ideal from a security\r\n  perspective.\r\n* Scalability and replication of the database become the responsibility of the\r\n  web application developers.\r\n\r\nLDAP server:\r\n\r\n* Users and credentials are centralized, but we don't get true single sign-on.\r\n* Authentication is often password based, which is not ideal from a security\r\n  perspective.\r\n* The web application has to be able to handle the wide variety of LDAP schema\r\n  that deployers may have in their environments.\r\n* The web application needs direct access to the LDAP server.\r\n\r\nWhen using Ipsilon for SAML federation, an application is relieved of the above\r\nburdens.  Ipsilon deals with all of the authentication and lookup of user\r\ninformation from the centralized identity source.\r\n\r\nThis document describes the recommended practices for integrating a web\r\napplication with Ipsilon to allow for SAML federated single sign-on.\r\n\r\n\r\nFederated Single Sign-On Concepts\r\n=================================\r\n\r\nBefore getting into the concepts of SAML federated single sign-on, it is\r\nimportant to understand some basic terminology:\r\n\r\nIdentity Provider (IDP)\r\n  A SAML Identity Provider is responsible for authenticating users on behalf of\r\n  other web applications.  The IDP then provides information about\r\n  authenticated users to web applications in the form of assertions.  Ipsilon\r\n  is a SAML IDP.\r\n\r\nService Provider (SP)\r\n  A SAML Service Provider is a web application that is using an IDP to provide\r\n  authentication service and user information.\r\n\r\nAssertion\r\n  An assertion is some property about a user that the IDP claims is true.  A\r\n  collection assertions represent a user object, which a web application can\r\n  then use for identification and authorization purposes.\r\n\r\nSingle Sign-On (SSO)\r\n  Single Sign-On allows a user to authenticate once within some period of time,\r\n  and then access multiple applications without having to authenticate again.\r\n\r\nFederated single sign-on (SSO) allows a web application to use identities\r\nfrom an external identity source that it does not manage, while also having\r\nthe benefit of true SSO.\r\n\r\nMost organizations already have some form of centralized identity management,\r\nsuch as an LDAP server.  Having separate identity silos per application is a\r\nfrustrating user experience.  Tying a web application directly into a\r\ncentralized identity management system is a burden on the web application\r\ndeveloper for the reasons previously mentioned in this document.  SAML\r\nfederation allows a web application to be presented with data representing\r\nan authenticated user when that user accesses the application.  This data is\r\ncrytographically proven to be from a trusted source, and is provided in an\r\neasy to consume form.  This data can be used by the web application without the\r\nneed for the web application to reach out to a central identity management\r\nsystem.  The web application does not need to know how the user authenticated,\r\nor even where the user information is stored.  This removes a lot of complexity\r\nfrom the web application itself.\r\n\r\nIn some cases, the identity management system might not even be accessible by\r\nthe web application.  Consider a company that provides a web application as a\r\npaid-for service.  Instead of requiring customers to create users within a\r\ndatabase for the web application, the web application can be configured to\r\ntrust a customer's IDP.  The web application never needs to communicate\r\ndirectly with the IDP or the underlying identity management system, which are\r\nlikely behind the customer's firewall.\r\n\r\nAuthentication Flow\r\n-------------------\r\n\r\nThe following picture depicts the authentication flow that occurs when using\r\nSAML::\r\n\r\n    +---------------+      +---------------+\r\n    |               |      |               |\r\n    |  Application  |      |    Ipsilon    |\r\n    |      (SP)     |      |     (IDP)     |\r\n    |               |      |               |\r\n    +--^----+----^--+      +----^-----+----+\r\n       |    |    |              |     |\r\n      (1)  (2)  (5)            (3)   (4)\r\n       |    |    |              |     |\r\n    +--+----v----+--------------+-----v----+\r\n    |                                      |\r\n    |             Web Browser              |\r\n    |                                      |\r\n    +--------------------------------------+\r\n\r\nThe steps in the authentication flow are:\r\n\r\n  1. A user accesses a protected URL of the web application via browser.\r\n\r\n  2. The web application returns a redirect to the user, pointing them to the\r\n     IDP.\r\n\r\n  3. The browser follows the redirect to the IDP, where the user is asked to\r\n     authenticate.\r\n\r\n  4. Upon successful authentication, the IDP returns a SAML response as a\r\n     part of a form that is set to submit when loaded.\r\n\r\n  5. The browser automatically sumbits the returned form, which does a POST\r\n     of the SAML response to the web application.\r\n\r\nAt the end of the authentication flow, the assertion values contained in the\r\nSAML response are mapped into environment variables by an Apache httpd module\r\non the SP.  These environment variables are made available to the web\r\napplication, where they can be used for user identification, authorization, or\r\nany other purpose that the web application may have.\r\n\r\nThe nice thing from the web application developers viewpoint is that none of\r\nthe above steps are the responsibility of the web application itself.  All of\r\nthe work is performed by the browser, an Apache httpd module on the SP, and\r\nthe Ipsilon IDP.  The web application only needs to deal with the environment\r\nvariable data that is provided to it.\r\n\r\n\r\nWeb Application Integration\r\n===========================\r\n\r\nIn order for a web application to use Ipsilon for federated SSO, there are a\r\nfew things that need to be done.  Its webserver needs to be configured as a\r\nSP, and the web application needs to be able to handle the user data that is\r\nprovided to it from the SAML assertions.\r\n\r\nService Provider Configuration\r\n------------------------------\r\n\r\nConfiguring a web application's webserver as a SP is comprised of a few steps:\r\n\r\n* SP key, certificate, and metadata generation\r\n* IDP metadata retrieval\r\n* SP registration\r\n* httpd configuration\r\n\r\nA number of the above steps are handled for you by the\r\n``ipsilon-client-install`` utility.  We will still describe the steps here to\r\nprovide a thorough understanding of each step, but it is recommended to use the\r\nipsilon-client-install utility to simplify the configuration procedure.\r\n\r\nSAML relies on trusted responses that are sent between the IDP and the SP via\r\nthe user's browser.  These responses are cryptographically authenticated and\r\neven have the capability to be encrypted.  This requires key and certificate\r\ngeneration, and an establishment of trust on both the IDP and the SP.  In\r\naddition to certificate trust, some additional information needs to be\r\nexchanged between the IDP and SP so that each side knows how to communicate\r\nwith each other from a SAML perspective.  This information takes the form of an\r\nXML metadata file, and both the IDP and SP need to exchange their metadata\r\nwhen a SP is being configured.\r\n\r\nUsing ``ipsilon-client-install`` will generate a key, certificate, and SP\r\nmetadata.  If Ipsilon admin user credentials are supplied, it will also send\r\nthe SP metadata to Ipsilon to register it as a trusted SP.\r\n\r\nThe ``ipsilon-client-install`` utility also has the ability to create a basic\r\nApache httpd configuration, but that is typically only useful for a very basic\r\nnew site or experimentation.  For existing web applications, one should tell\r\n``ipsilon-client-install`` to skip the httpd configuration and the\r\nconfiguration should be performed manually.\r\n\r\nHere is a basic example of using ``ipsilon-client-install`` to set up a SP::\r\n\r\n    ipsilon-client-install --saml-idp-url https://ipsilon.example.test/idp \\\r\n                           --saml-sp-name mysite --saml-auth /sp \\\r\n                           --saml-no-httpd\r\n\r\nIn this example, we are providing a pointer to our Ipsilon IDP, providing a\r\nname for our SP to be used during registration, and specifying the URI where we\r\nwant to require SAML authentication (``/sp``).  We are also skipping the httpd\r\nconfiguration since we will be doing that manually.\r\n\r\nIf you use a non-standard port for your web application, of if the hostname\r\nthat is used to access your web application is not the FQDN,  you will need\r\nto use the ``--hostname`` and ``--port`` options to ensure that the URLs are\r\ncorrect in the generated metadata.  Note that ``ipsilon-client-install``\r\ncurrently enforces that https is being used in the URLs it generates.\r\n\r\nThere are a few other options which may or may not be needed depending on the\r\nexact URIs that you want to use for SAML communication.  The following are the\r\nURIs that ``ipsilon-client-install`` will set in the SP metadata:\r\n\r\nbase\r\n  This is the URI where SAML assertion data will be made available to the web\r\n  application if it is present.  The default is ``/``, but it can be set with the\r\n  ``--saml-base`` option.\r\n\r\nauth\r\n  This is the URI where SAML authentication is required.  This URI must be\r\n  beneath the base URI.  Accessing this URI will trigger the authentication\r\n  flow described above.  The browser will then return to this URI upon\r\n  successful authentication.  This should typically be set to the \"Log In\" URI\r\n  of your web application.  It defaults to ``/protected``, but it can be\r\n  set with the ``--saml-auth`` option.\r\n\r\nendpoint\r\n  This is the URI where SAML communication will occur.  This URI must be\r\n  beneath the base URI.  This is not an actual URI within your web\r\n  application, as the httpd module will be handling communication for this URI.\r\n  The default is ``/saml2``, but it can be set with the ``--saml-sp`` option.\r\n\r\nlogout\r\n  This is the URI where SAML logout will be triggered.  This URI must be\r\n  beneath the endpoint URI.  This is not an actual URI within your web\r\n  application, as the httpd module will be handling communication for this URI.\r\n  The default is ``/saml2/logout``, but it can be set with the\r\n  ``--saml-sp-logout`` option.  More detail about how the logout URI is used\r\n  are provided in the `Logout Handling`_ section below.\r\n\r\npost\r\n  This is the URI where SAML responses from the IDP will be posted.  This URI\r\n  must be beneath the endpoint URI.  This is not an actual URI within your web\r\n  application, as the httpd module will be handling communication for this URI.\r\n  The default is ``/saml2/postResponse``, but if can be set with the\r\n  ``--saml-sp-post`` option.\r\n\r\nYou will typically only need to specify the auth URI option above, unless you\r\nhave a reason to change the base URI (which will affect all of the other URIs\r\nsince they all must be beneath the base).\r\n\r\nYou can download the IDP metadata from Ipsilon.  Assuming that the IDP name of\r\nIpsilon is the default of ``idp``, the metadata can be accessed at::\r\n\r\n    ``https://<ipsilon FQDN>/idp/saml2/metadata``\r\n\r\nYou will need to save this metadata for configuring httpd in the next step.\r\n\r\nApache HTTPD Config\r\n-------------------\r\n\r\nThe handling of SAML in httpd is taken care of by the `mod_auth_mellon`_\r\nmodule.  The first step in ensuring that you are loading the mod_auth_mellon\r\nlibrary.  This will look something like this::\r\n\r\n    LoadModule auth_mellon_module /usr/lib64/httpd/modules/mod_auth_mellon.so\r\n\r\nYou will need to ensure that the ``Location`` directive that matches the base\r\nURI we specified during metadata creation contains the proper Mellon\r\ndirectives.  This ``Location`` directive is where we specify the key and\r\ncertificate that the SP is using, the trusted IDP metadata, and the endpoint\r\nURI to use for SAML communication.  Here is an example of the base URI\r\n``Location`` directive::\r\n\r\n    <Location />\r\n      MellonEnable \"info\"\r\n      MellonSPPrivateKeyFile /etc/httpd/saml2/mysite/certificate.key\r\n      MellonSPCertFile /etc/httpd/saml2/mysite/certificate.pem\r\n      MellonSPMetadataFile /etc/httpd/saml2/mysite/metadata.xml\r\n      MellonIdPMetadataFile /etc/httpd/saml2/mysite/idp-metadata.xml\r\n      MellonEndpointPath /saml2\r\n      MellonIdP \"IDP\"\r\n    </Location>\r\n\r\nThe ``MellonEnable`` directive with a value of ``info`` means that assertion\r\ndata will be made available to the web application at this location if it is\r\npresent.  If a user has not authenticated via SAML, they will be allowed into\r\nyour site, but no assertion data will be present to provide.  Typically, this\r\nlocation will encompass your entire web application and you will have an\r\nadditional protected location at your \"Log In\" URI that triggers the\r\nauthentication flow.\r\n\r\nThe ``MellonSP*`` directives tell mod_auth_mellon about the SP that it is\r\nrepresenting.  These directives point to the key, certificate, and metadata\r\nthat was generated by ``ipsilon-client-install``.\r\n\r\nThe ``MellonIdPMetadataFile`` directive points to the IDP metadata that you\r\ndownloaded from the IDP.  The IDP metadata contains the certificate of the IDP,\r\nso it is used to validate the signature of the responses that come from the\r\nIDP.  In effect, this is how the trust of the IDP is configured for your SP.\r\nThe IDP metadata also contains the URL of the IDP, which is used when\r\nredirecting users to the IDP to perform authentication.\r\n\r\nThe ``MellonEndpointPath`` directive must match the endpoint URI that was used\r\nwhen generating the metadata with ``ipsilon-client-install``.\r\n\r\nThe ``MellonIdP`` directive is used to expose an IDP identifier to your web\r\napplication via an environment variable.  The value of this directive is used\r\nto indicate the name of the environment variable.\r\n\r\nYou also need to configure your auth URI to require authentication via\r\nmod_auth_mellon.  This is done by adding the ``AuthType`` and ``MellonEnable``\r\ndirectives within the ``Location`` directive that matches your auth URI.  Here\r\nis an example of the auth URI ``Location`` directive::\r\n\r\n    <Location /sp>\r\n      AuthType \"Mellon\"\r\n      MellonEnable \"auth\"\r\n    </Location>\r\n\r\nWith these changes, you should be able to access your auth URI, which will\r\ntrigger the authentication flow that was previously described.  The browser\r\nwill be returned to the auth URI, and values contained in the SAML assertion\r\nwill be exposed to your web application as environment variables.  To do\r\nanything useful, your application will have to know how to consume this\r\nassertion data.\r\n\r\nConsuming Assertion Data\r\n------------------------\r\nA web application will typically need changes to allow it to make use of the\r\nenvironment variables that are provided by mod_auth_mellon.  Making these\r\nchanges even has value outside of Ipsilon, as it allows your web application to\r\nsupport external authentication and user info as described in the\r\n`Web App Authentication`_ page on the FreeIPA wiki.  It will ultimately make\r\nyour web application more flexible as new authentication and federation methods\r\nemerge.\r\n\r\nThe provided environment variables fall into two main categories.  A user\r\nidentifier, and other information about the user.\r\n\r\nIf your web application only needs to know who the user is and nothing else\r\nabout the user, it's quite possible that no changes are needed in your\r\napplication.  This is because the user identifier is provided as the\r\n``REMOTE_USER`` environment variable, which is commonly used by other httpd\r\nauthentication modules.\r\n\r\nQuite often, the ``REMOTE_USER`` environment variable isn't enough.  It is\r\ncommon for a web application to want more information about a user, such as\r\ntheir e-mail address, their full name, and the groups that they are a member\r\nof.  Depending on how the Ipsilon IDP is configured, all of this information\r\ncan be provided to a SP in the SAML assertions.  This of course assumes that\r\nthe underlying identity management system that Ipsilon is using has the\r\ninformation that you need.\r\n\r\nEvery assertion that is contained in the SAML response is provided to your web\r\napplication by mod_auth_mellon.  The environment variables that expose these\r\nvalues are prefixed by `MELLON_`, followed by the name of the assertion.  These\r\nnames are defined by the IDP configuration.  Your application is not forced to\r\nuse a specific set of environment variable names however.  You can configure\r\nmod_auth_mellon to map the SAML assertions to different environment variable\r\nnames.  This is done by using the ``MellonSetEnv`` and ``MellonSetEnvNoPrefix``\r\ndirectives in the ``Location`` directive for your base URI.  Consider the\r\nfollowing examples::\r\n\r\n    MellonSetEnv \"email\" \"mail\"\r\n    MellonSetEnvNoPrefix \"DISPLAY_NAME\" \"displayName\"\r\n\r\nBoth of these directives take the form ``<directive> <local name> <IDP name>``.\r\nIn the case of the above example, a ``mail`` attribute in the SAML assertion\r\nwould be expressed as the ``MELLON_email`` environment variable.  The\r\n``MellonSetEnvNoPrefix`` directive works the same way, but it does not use the\r\n``MELLON_`` prefix.  In this case, a ``displayName`` attribute in the SAML\r\nassertion would be expressed as the ``DISPLAY_NAME`` environment variable.\r\nThere are some good recommendations on some common environment variables that\r\nshould be used for web application authentication in general on the FreeIPA\r\nwiki's `Web App Authentication`_ page.\r\n\r\nFor the purposes of authorization within a web application, it is recommended\r\nto take advantage of group membership information that is provided in the SAML\r\nassertions.  For instance, if your web application has a concept of an\r\n``user`` role, it can allow that role to be assigned to a group that is\r\ndefined in the identity management system that is used by the IDP.  This\r\nallows for application access to be controlled by group assignment centrally\r\nin the identity management system.  It is of course possible to assign the\r\nweb application roles directly to a user as well if the groups don't map\r\ncleanly to the authorization grouping within your application.  Still, it is\r\nbest to try to keep user and group management out of the web application as\r\nmuch as possible.\r\n\r\nIt is not uncommon for a web application to have a need to store information\r\nabout a user that will not be provided by an IDP or even by any identity\r\nmanagement system.  One of the most common cases of this is storing user\r\npreferences that are specific to the web application.  The recommended way of\r\nhandling this is to have the web application create a record for this data in\r\nit's own backend database when it first sees a new user.  It can associate this\r\ndata with a user identitfier from the assertion, such as ``REMOTE_USER`` or\r\nsome combination of assertion values that is guaranteed to be unique.  The\r\nimportant thing is that none of the other user data from the assertion should\r\nbe duplicated in the web application's backend database.\r\n\r\nLogout Handling\r\n---------------\r\nChanges may also be needed to the web application to allow logout to work\r\nproperly.  When a user succesfully authenticates and accesses a SP that uses\r\nmod_auth_mellon, a cookie is set in the user's browser to represent their\r\nsession.  In order to terminate this session when the user logs out of the\r\nweb application, you have to make sure that your web application will send the\r\nuser to the logout URI that was defined when the SP metadata was generated.  In\r\naddition, a required ``ReturnTo`` query parameter must be specified, which\r\ntells mod_auth_mellon where to send the user after completing the logout\r\noperation.  The format of this looks like::\r\n\r\n    <logout URI>?ReturnTo=<url to redirect to after logout>\r\n\r\nTypically, your application will either redirect or provide a direct link to\r\nthe logout URI.\r\n\r\n\r\nReferences\r\n==========\r\n.. target-notes::\r\n\r\n.. _mod_auth_mellon: https://github.com/UNINETT/mod_auth_mellon/wiki\r\n.. _Web App Authentication: http://www.freeipa.org/page/Web_App_Authentication\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}